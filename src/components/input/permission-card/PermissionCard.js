import React, { useState, useEffect } from 'react';
import {
    Row, Col, Card, Button
} from 'react-bootstrap';

import PermissionContent from './PermissionContent';

const permissionNamesList = [
    "ACCEPT_HANDOVER",
    "ACCESS_BACKGROUND_LOCATION",
    "ACCESS_CHECKIN_PROPERTIES",
    "ACCESS_COARSE_LOCATION",
    "ACCESS_FINE_LOCATION",
    "ACCESS_LOCATION_EXTRA_COMMANDS",
    "ACCESS_MEDIA_LOCATION",
    "BIND_DREAM_SERVICE",
    "BIND_INCALL_SERVICE",
    "BIND_INPUT_METHOD",
    "BIND_MIDI_DEVICE_SERVICE",
    "BIND_NFC_SERVICE",
    "BIND_TV_INPUT",
    "CAMERA",
    "CAPTURE_AUDIO_OUTPUT",
    "ACCEPT_HANDOVER",
    "ACCESS_BACKGROUND_LOCATION",
    "ACCESS_CHECKIN_PROPERTIES",
    "ACCESS_COARSE_LOCATION",
    "ACCESS_FINE_LOCATION",
    "ACCESS_LOCATION_EXTRA_COMMANDS",
    "ACCESS_MEDIA_LOCATION",
    "BIND_DREAM_SERVICE",
    "BIND_INCALL_SERVICE",
    "BIND_INPUT_METHOD",
    "BIND_MIDI_DEVICE_SERVICE",
    "BIND_NFC_SERVICE",
    "BIND_TV_INPUT",
    "CAMERA"
]

const PermissionCard = ({inputs, setInputs}) => {
    const [permissionStates, setPermissionStates] = useState({});
    const [permissionNames, setPermissionNames] = useState([]);

    useEffect(() => {
        setPermissionNames(permissionNamesList);
        setPermissionStates(() => {
            let temp = {};
            for (let i = 0; i < permissionNames.length; ++i) temp[i] = false;
            return temp;
        });
    }, [permissionNames]);

    const handleCreateInputManually = () => {
        let temp = "";
        Object.keys(permissionStates).forEach(key => {
            temp = temp.concat(permissionStates[key] ? '1' : '0');
        });
        let xinput = inputs.concat({ 
            string: temp,
            mode: 'by ManualSwitch',
            time: Date.now() 
        });
        setInputs(xinput);
    }

    const resetStates = () => {
        setPermissionStates(() => {
            let temp = {};
            for (let i = 0; i < permissionNames.length; ++i) temp[i] = false;
            return temp;
        });
    }

    return (
        <div className="permission-card">
            <Card style={{
                width: '90%',
                marginTop: '4vh',
                fontSize: '14px',
                height: '74vh',
                overflowY: 'scroll',
                borderRadius: '0px',
                border: '2px solid #999',
                borderRight: '0px'
            }}>
                <Card.Body>
                    <Row style={{ marginBottom: '2vh' }}>
                        <Col xs={9} sm={9} md={9} xl={9}><b>Permission</b></Col>
                        <Col xs={3} sm={3} md={3} xl={3}><b>State</b></Col>
                    </Row>
                    <hr style={{color: '#999', opacity: '1'}}/>
                    {
                        permissionNames.length > 0 && permissionNames.map((p, i) => {
                            return <PermissionContent key={i} permission={[p, permissionStates[i], i]} changePermissions={setPermissionStates} allPermissions={permissionStates}/>
                        })
                    }
                </Card.Body>
            </Card>
            <Row>
                <Col sm={8} md={8} lg={8} xl={8}><Button variant='dark' onClick={handleCreateInputManually} block style={{
                    // maxWidth: '90%',
                    border: '1px solid #999',
                    marginTop: '2vh',
                    borderRadius: '0px'
                }}>Add</Button></Col>
                <Col><Button variant='dark' onClick={resetStates} block style={{
                    maxWidth: '67.5%',
                    border: '1px solid #999',
                    marginTop: '2vh',
                    borderRadius: '0px',
                    // float: 'right'
                }}>Reset</Button></Col>
            </Row>
        </div>
    )
}

export default PermissionCard
